#!/usr/bin/wish

. configure -padx 5 -pady 5

namespace eval rift {
	variable time 0
	variable timerLabel "XX:XX.XX"
	variable currentStartTime 0
	variable currentTimerLabel "XX:XX.XX"
	variable runFilename {}

	proc updateTimer {} {
		variable time
		variable timerLabel
		variable currentStartTime
		variable currentTimerLabel

		set timerLabel [formatDuration $time]
		set currentTimerLabel [formatDuration [expr $time - $currentStartTime]]
	}

	proc formatDuration {micros} {
		set CENTI  10000
		set SECOND [expr $CENTI * 100]
		set MINUTE [expr $SECOND * 60]
		set HOUR   [expr $MINUTE * 60]

		set hrs    [expr $micros / $HOUR]
		set micros [expr $micros % $HOUR]
		set mins   [expr $micros / $MINUTE]
		set micros [expr $micros % $MINUTE]
		set secs   [expr $micros / $SECOND]
		set micros [expr $micros % $SECOND]
		set centis [expr $micros / $CENTI]

		set fmt [format "%.2d" $centis]
		set fmt [formatPart {$hrs || $mins} 1 $secs . $fmt]
		set fmt [formatPart $hrs $mins $mins : $fmt]
		set fmt [formatPart 0 $hrs $hrs : $fmt]
		return $fmt
	}
	proc formatPart {cond1 cond2 part sep fmt} {
		if {[uplevel 1 expr $cond1]} {
			format "%.2d%s%s" $part $sep $fmt
		} elseif {[uplevel 1 expr $cond2]} {
			format "%d%s%s" $part $sep $fmt
		} else {
			return $fmt
		}
	}

	proc title {game category} {
		ttk::label .title -style Title.TLabel -text "$game\n$category" -justify center
		pack .title
	}

	proc timer {} {
		ttk::frame .timer -borderwidth 0
		pack .timer -fill x

		ttk::label .timer.main -style Timer.TLabel -textvariable ::rift::timerLabel -anchor e
		pack .timer.main -fill x

		ttk::label .timer.current -style Current.Timer.TLabel -textvariable ::rift::currentTimerLabel -anchor e
		pack .timer.current -fill x
	}

	proc splits {config} {
		ttk::treeview .splits \
			-style Splits.Treeview \
			-selectmode none -show tree \
			-columns {delta time}

		.splits column delta -width 50 -stretch false
		.splits column time -width 85 -stretch false

		loadSplitLayout {} $config
		pack .splits -fill both -expand true
	}
	proc setSplit {splitID saveRun} {
		if {$splitID eq [.splits selection]} {
			return
		}

		# Set the previous split's time
		variable timerLabel
		set item [.splits selection]
		.splits set $item time $timerLabel
		while {$item ne {} && [.splits next $item] eq {}} {
			set item [.splits parent $item]
			.splits set $item time $timerLabel
		}

		# Close everything
		set item [.splits selection]
		while {$item ne {}} {
			.splits item $item -open false
			set item [.splits parent $item]
		}

		# Set new active split
		.splits selection set $splitID
		.splits see [.splits selection]
		variable time
		set currentStartTime $time

		# If we're ending the run and have been asked to save, save the run
		if {$splitID eq {} && $saveRun} {
			variable gamePath
			variable runFilename
			file mkdir "$gamePath/runs"
			set f [open "$gamePath/runs/$runFilename" w]
			try {
				puts -nonewline $f [saveSplitTimes {} {}]
			} finally {
				close $f
			}
		}
	}
	proc timerStarted {} {
		return [llength [.splits selection]]
	}

	proc loadSplitLayout {root config} {
		foreach {name body} $config {
			set item [.splits insert $root end -text $name]
			if {[llength $body] != 1} {
				loadSplitLayout $item $body
			}
		}
	}
	proc loadSplitTimes {root config} {
		foreach {name body} $config item [.splits children $root] {
			if {[llength $body] == 1} {
				while {$item ne {}} {
					.splits set $item time [lindex $body 0]
					set item [.splits parent $item]
				}
			} else {
				loadSplitTimes $item $body
			}
		}
	}
	proc saveSplitTimes {root indent} {
		set text ""
		foreach item [.splits children $root] {
			set name [.splits item $item -text]
			set children [.splits children $item]
			if {[llength $children] == 0} {
				append text "$indent[list $name [.splits set $item time]]\n"
			} else {
				append text "$indent[list $name] {\n"
				append text [saveSplitTimes $item "\t$indent"]
				append text "$indent}\n"
			}
		}
		return $text
	}

	proc resetTimes {} {
		variable gamePath
		try {
			set f [open "$gamePath/pb"]
		} on error {} {
			emptyTimes {}
			tk_messageBox -icon warning -message "Could not open personal best"
			return
		}
		try {
			set config [chan read $f]
		} finally {
			close $f
		}
		loadSplitTimes {} $config
	}
	proc emptyTimes {item} {
		foreach item [.splits children $item] {
			.splits set $item time {}
			emptyTimes $item
		}
	}

	proc splitter {path} {
		set f [open $path]
		chan configure $f -blocking false
		chan event $f readable "::rift::readEvent $f"
	}
	proc readEvent {f} {
		variable time
		variable currentStartTime

		if {[chan gets $f ev] < 0} {
			chan event $f readable
			error "Splitter disconnected"
			exit 1
		}
		set time [lindex $ev 0]
		set type [lindex $ev 1]

		switch -nocase -- $type {
			BEGIN {
				variable runFilename [clock format [clock seconds] -timezone UTC -format "%Y-%m-%dT%T"]
				resetTimes
				setSplit [firstLeaf .splits {}] false
			}

			RESET {
				resetTimes
				setSplit {} false
				# Always update the timer after a RESET
				updateTimer
			}

			SPLIT {
				set item [.splits selection]
				setSplit [nextLeaf .splits $item] true
			}
		}

		if {[timerStarted]} {
			updateTimer
		}
	}

	proc firstLeaf {pathname item} {
		set children [$pathname children $item]
		while {[llength $children]} {
			set item [lindex $children 0]
			set children [$pathname children $item]
		}
		return $item
	}
	proc nextLeaf {pathname item} {
		while {[$pathname next $item] eq {}} {
			set item [$pathname parent $item]
			if {$item eq {}} {
				return
			}
		}
		set item [$pathname next $item]
		return [firstLeaf $pathname $item]
	}

	# Default styles
	array set styles {
		background #fff
		foreground #000

		title {-font "Helvetica 14"}
		timer {-font "Helvetica 24 bold"}
		timer.ahead {-foreground #64ff64}
		timer.behind {-foreground #ff3232}
		timer.current {-font "Helvetica 16"}

		splits {-font "Helvetica 12"}
		splits.best {-foreground #ffdc00}
		splits.aheadGain {-foreground #50d200}
		splits.aheadLose {-foreground #b4ff78}
		splits.behindGain {-foreground #c80000}
		splits.behindLose {-foreground #ffdc00}
	}
	proc style {name args} {
		# Attempt an access to ensure the key is valid
		nop $::rift::styles($name)

		set ::rift::styles($name) $args
	}
	proc applyStyles {} {
		set background [lindex $::rift::styles(background) 0]
		set foreground [lindex $::rift::styles(foreground) 0]
		. configure -background $background
		ttk::style configure . -background $background -foreground $foreground

		ttk::style configure Title.TLabel {*}$::rift::styles(title)

		ttk::style configure Timer.TLabel {*}$::rift::styles(timer)
		ttk::style configure Ahead.Timer.TLabel {*}$::rift::styles(timer.ahead)
		ttk::style configure Behind.Timer.TLabel {*}$::rift::styles(timer.ahead)
		ttk::style configure Current.Timer.TLabel {*}$::rift::styles(timer.current)

		ttk::style configure Splits.Treeview \
			-background $background -fieldbackground $background \
			-foreground $foreground -fieldforeground $foreground \
			{*}$::rift::styles(splits)
		ttk::style configure Splits.Treeview.Item -indicatorsize 0 -indicatormargins 0
		ttk::style layout Splits.Treeview {
			Treeview.padding -sticky nsew -border 0 -children {
				Treeview.treearea -sticky nsew -border 0 -expand true
			}
		}
		.splits tag configure best {*}$::rift::styles(splits.best)
		.splits tag configure aheadGain {*}$::rift::styles(splits.aheadGain)
		.splits tag configure aheadLose {*}$::rift::styles(splits.aheadLose)
		.splits tag configure behindGain {*}$::rift::styles(splits.behindGain)
		.splits tag configure behindLose {*}$::rift::styles(splits.behindLose)
	}
	proc aliasStyles {} {
		foreach name [array names ::rift::styles] {
			uplevel 1 "proc $name args {::rift::style $name {*}\$args}"
		}
	}

	proc nop args {}
	proc alias {name} {
		uplevel 1 "proc $name args {::rift::$name {*}\$args}"
	}
}

namespace eval riftGameConfig {
	::rift::alias title
	::rift::alias timer
	::rift::alias splits
	::rift::alias splitter
}

namespace eval riftStyleConfig {
	::rift::aliasStyles
}

# Parse args
if {[llength $argv] != 1} {
	puts "Usage: $argv0 GAME"
	puts ""
	puts "Available games:"
	foreach game [glob -directory games -tails -types d *] {
		puts " - $game"
	}
	exit 1
}
set ::rift::gamePath "games/[lindex $argv 0]"
namespace eval riftGameConfig {
	source "$::rift::gamePath/config.tcl"
}
namespace eval riftStyleConfig {
	source "style.tcl"
}
::rift::applyStyles
::rift::resetTimes
