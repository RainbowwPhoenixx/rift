#!/usr/bin/wish

. configure -padx 5 -pady 5

namespace eval rift {
	variable time 0
	variable timerLabel "XX:XX.XX"
	variable currentStartTime 0
	variable currentTimerLabel "XX:XX.XX"
	variable runFilename ""
	variable personalBest inf
	variable golds {}
	variable splitLayout {}
	array set filewarned {golds false pb false}
	variable doGoldBackup true

	variable saveDp 6
	variable displayDp 3

	proc updateTimer {} {
		variable time
		variable timerLabel
		variable currentStartTime
		variable currentTimerLabel

		set timerLabel [formatDuration $::rift::displayDp $time]
		set currentTimerLabel [formatDuration $::rift::displayDp [expr $time - $currentStartTime]]
	}

	variable CENTI  10000
	variable SECOND [expr $CENTI * 100]
	variable MINUTE [expr $SECOND * 60]
	variable HOUR   [expr $MINUTE * 60]
	proc formatDuration {dp micros} {
		set micros [expr int($micros)]
		set hrs    [expr $micros / $::rift::HOUR]
		set micros [expr $micros % $::rift::HOUR]
		set mins   [expr $micros / $::rift::MINUTE]
		set micros [expr $micros % $::rift::MINUTE]
		set secs   [expr $micros / double($::rift::SECOND)]

		if {$hrs || $mins} {
			set fmt [format "%0[expr {$dp + 3}].${dp}f" $secs]
		} else {
			set fmt [format "%.${dp}f" $secs]
		}

		if {$hrs} {
			set fmt [format "%.2d:%s" $foo $fmt]
		} elseif {$mins} {
			set fmt [format "%d:%s" $foo $fmt]
		}

		if {$hrs} {
			set fmt [format "%d:%s" $hrs $fmt]
		}

		return $fmt
	}

	proc parseDuration {fmt} {
		set bits [split $fmt :]
		set secs [lpop bits inf]
		set mins [lpop bits 0]
		set hrs  [lpop bits 0]
		expr {$secs*$::rift::SECOND + $mins*$::rift::MINUTE + $hrs*$::rift::HOUR}
	}
	proc lpop {listVar default} {
		upvar 1 $listVar var
		if {[llength $var]} {
			set val [lindex $var end]
			set var [lreplace $var end end]
			return $val
		} else {
			return $default
		}
	}

	proc title {game category} {
		ttk::label .title -style Title.TLabel -text "$game\n$category" -justify center
		pack .title
	}

	proc timer {} {
		ttk::frame .timer -borderwidth 0
		pack .timer -fill x

		ttk::label .timer.main -style Timer.TLabel -textvariable ::rift::timerLabel -anchor e
		pack .timer.main -fill x

		ttk::label .timer.current -style Current.Timer.TLabel -textvariable ::rift::currentTimerLabel -anchor e
		pack .timer.current -fill x
	}

	proc splits {config} {
		ttk::treeview .splits \
			-style Splits.Treeview \
			-selectmode none -show tree \
			-columns {delta time timeMicro} \
			-displaycolumns {delta time}

		.splits column delta -width 50 -stretch false
		.splits column time -width 85 -stretch false

		variable splitLayout $config
		loadSplitLayout {} $splitLayout
		pack .splits -fill both -expand true
	}
	proc setSplit {splitID saveRun} {
		if {$splitID ne [.splits selection]} {
			# Set the previous split's time
			variable timerLabel
			variable time
			set item [.splits selection]
			.splits set $item time $timerLabel
			.splits set $item timeMicro $time
			while {$item ne {} && [.splits next $item] eq {}} {
				set item [.splits parent $item]
				.splits set $item time $timerLabel
				.splits set $item timeMicro $time
			}

			# Update the golds file if needed
			variable gamePath
			variable time
			variable currentStartTime
			if {$saveRun && [updateGolds $currentStartTime $time [.splits selection]]} {
				variable golds
				variable doGoldBackup
				if {$doGoldBackup} {
					file rename -force "$gamePath/golds" "$gamePath/golds.bak"
					set doGoldBackup false
				}
				set f [open "$gamePath/golds" w]
				try {
					puts $f [formatSplitTimes {} $golds]
				} finally {
					close $f
				}
			}

			# Close everything
			set item [.splits selection]
			while {$item ne {}} {
				.splits item $item -open false
				set item [.splits parent $item]
			}

			# Set new active split
			.splits selection set $splitID
			.splits see [.splits selection]

			# If we're ending the run and have been asked to save, save the run
			if {$splitID eq {} && $saveRun} {
				variable runFilename
				file mkdir "$gamePath/runs"
				set f [open "$gamePath/runs/$runFilename" w]
				try {
					set times [formatSplitTimes {} [saveSplitTimes {}]]
					puts -nonewline $f $times
				} finally {
					close $f
				}

				# If this run is the new PB, update the symlink
				variable personalBest
				if {$personalBest > [runLength]} {
					file delete "$gamePath/pb"
					file link -symbolic "$gamePath/pb" "runs/$runFilename"
					set personalBest [runLength]
				}
			}
		}

		# Update start time even when changing to the same split
		variable time
		variable currentStartTime $time
	}
	proc timerStarted {} {
		return [llength [.splits selection]]
	}

	proc loadSplitLayout {root config} {
		foreach {name body} $config {
			set item [.splits insert $root end -text $name]
			if {[llength $body] != 1} {
				loadSplitLayout $item $body
			}
		}
	}
	proc loadSplitTimes {root config} {
		foreach {name body} $config item [.splits children $root] {
			if {[llength $body] == 1} {
				set tMicro [parseDuration [lindex $body 0]]
				set tText [formatDuration $::rift::displayDp $tMicro]
				while {$item ne {}} {
					.splits set $item timeMicro $tMicro
					.splits set $item time $tText
					set item [.splits parent $item]
				}
			} else {
				loadSplitTimes $item $body
			}
		}
	}
	proc saveSplitTimes {root} {
		set l {}
		foreach item [.splits children $root] {
			lappend l [.splits item $item -text]
			if {[llength [.splits children $item]]} {
				lappend l [saveSplitTimes $item]
			} else {
				lappend l [formatDuration $::rift::saveDp [.splits set $item timeMicro]]
			}
		}
		return $l
	}
	proc updateGolds {startTime endTime item} {
		set path {}
		while {$item ne {}} {
			lappend path [expr {2*[.splits index $item] + 1}]
			set item [.splits parent $item]
		}
		set path [lreverse $path]

		set time [expr {$endTime - $startTime}]

		variable golds
		try {
			set goldTime [parseDuration [lindex $golds $path]]
		} on error {} {
			set goldTime inf
		}
		if {$goldTime > $time} {
			lset golds $path [formatDuration $::rift::saveDp $time]
			return true
		} else {
			return false
		}
	}
	proc formatSplitTimes {indent times} {
		set text ""
		foreach {name body} $times {
			append text $indent[list $name]
			if {[llength $body] == 1} {
				append text " $body\n"
			} else {
				append text " {\n"
				append text [formatSplitTimes \t$indent $body]
				append text "$indent}\n"
			}
		}
		return $text
	}

	proc resetTimes {} {
		# Load personal best
		if {[tryRead pb pb]} {
			loadSplitTimes {} $pb
		} else {
			emptyTimes {}
		}

		# Load golds
		variable golds
		if {![tryRead golds golds]} {
			variable splitLayout
			set golds $splitLayout
			variable doGoldBackup false
		}

		# Set PB time
		variable personalBest [runLength]
	}
	proc tryRead {name varName} {
		variable gamePath
		upvar 1 $varName var
		try {
			set f [open "$gamePath/$name"]
			try {
				set var [chan read $f]
			} finally {
				close $f
			}
			return true
		} on error {} {
			variable filewarned
			if {!$filewarned($name)} {
				tk_messageBox -icon warning -message "Could not open $gamePath/$name"
				set filewarned($name) true
			}
			return false
		}
	}
	proc emptyTimes {item} {
		foreach item [.splits children $item] {
			.splits set $item time {}
			.splits set $item timeMicro inf
			emptyTimes $item
		}
	}
	proc runLength {} {
		 .splits set [lindex [.splits children {}] end] timeMicro
	}

	proc splitter {path} {
		set f [open $path]
		chan configure $f -blocking false
		chan event $f readable "::rift::readEvent $f"
	}
	proc readEvent {f} {
		variable time
		variable currentStartTime

		if {[chan gets $f ev] < 0} {
			chan event $f readable
			error "Splitter disconnected"
			exit 1
		}
		set time [lindex $ev 0]
		set type [lindex $ev 1]

		switch -nocase -- $type {
			BEGIN {
				variable runFilename [clock format [clock seconds] -timezone UTC -format "%Y-%m-%dT%T"]
				setSplit [firstLeaf .splits {}] false
				resetTimes
			}

			RESET {
				setSplit {} false
				resetTimes
				# Always update the timer after a RESET
				updateTimer
			}

			SPLIT {
				set item [.splits selection]
				setSplit [nextLeaf .splits $item] true
			}
		}

		if {[timerStarted]} {
			updateTimer
		}
	}

	proc firstLeaf {pathname item} {
		set children [$pathname children $item]
		while {[llength $children]} {
			set item [lindex $children 0]
			set children [$pathname children $item]
		}
		return $item
	}
	proc nextLeaf {pathname item} {
		while {[$pathname next $item] eq {}} {
			set item [$pathname parent $item]
			if {$item eq {}} {
				return
			}
		}
		set item [$pathname next $item]
		return [firstLeaf $pathname $item]
	}

	# Default styles
	array set styles {
		background #fff
		foreground #000

		title {-font "Helvetica 14"}
		timer {-font "Helvetica 24 bold"}
		timer.ahead {-foreground #64ff64}
		timer.behind {-foreground #ff3232}
		timer.current {-font "Helvetica 16"}

		splits {-font "Helvetica 12"}
		splits.best {-foreground #ffdc00}
		splits.aheadGain {-foreground #50d200}
		splits.aheadLose {-foreground #b4ff78}
		splits.behindGain {-foreground #c80000}
		splits.behindLose {-foreground #ffdc00}
	}
	proc style {name args} {
		# Attempt an access to ensure the key is valid
		nop $::rift::styles($name)

		set ::rift::styles($name) $args
	}
	proc applyStyles {} {
		set background [lindex $::rift::styles(background) 0]
		set foreground [lindex $::rift::styles(foreground) 0]
		. configure -background $background
		ttk::style configure . -background $background -foreground $foreground

		ttk::style configure Title.TLabel {*}$::rift::styles(title)

		ttk::style configure Timer.TLabel {*}$::rift::styles(timer)
		ttk::style configure Ahead.Timer.TLabel {*}$::rift::styles(timer.ahead)
		ttk::style configure Behind.Timer.TLabel {*}$::rift::styles(timer.ahead)
		ttk::style configure Current.Timer.TLabel {*}$::rift::styles(timer.current)

		ttk::style configure Splits.Treeview \
			-background $background -fieldbackground $background \
			-foreground $foreground -fieldforeground $foreground \
			{*}$::rift::styles(splits)
		ttk::style configure Splits.Treeview.Item -indicatorsize 0 -indicatormargins 0
		ttk::style layout Splits.Treeview {
			Treeview.padding -sticky nsew -border 0 -children {
				Treeview.treearea -sticky nsew -border 0 -expand true
			}
		}
		.splits tag configure best {*}$::rift::styles(splits.best)
		.splits tag configure aheadGain {*}$::rift::styles(splits.aheadGain)
		.splits tag configure aheadLose {*}$::rift::styles(splits.aheadLose)
		.splits tag configure behindGain {*}$::rift::styles(splits.behindGain)
		.splits tag configure behindLose {*}$::rift::styles(splits.behindLose)
	}
	proc aliasStyles {} {
		foreach name [array names ::rift::styles] {
			uplevel 1 "proc $name args {::rift::style $name {*}\$args}"
		}
	}

	proc nop args {}
	proc alias {name} {
		uplevel 1 "proc $name args {::rift::$name {*}\$args}"
	}
}

namespace eval riftGameConfig {
	::rift::alias title
	::rift::alias timer
	::rift::alias splits
	::rift::alias splitter
}

namespace eval riftStyleConfig {
	::rift::aliasStyles
}

# Parse args
if {[llength $argv] != 1} {
	puts "Usage: $argv0 GAME"
	puts ""
	puts "Available games:"
	foreach game [glob -directory games -tails -types d *] {
		puts " - $game"
	}
	exit 1
}
set ::rift::gamePath "games/[lindex $argv 0]"
namespace eval riftGameConfig {
	source "$::rift::gamePath/config.tcl"
}
namespace eval riftStyleConfig {
	source "style.tcl"
}
::rift::applyStyles
::rift::resetTimes
